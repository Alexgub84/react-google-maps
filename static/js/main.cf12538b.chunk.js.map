{"version":3,"sources":["services/ipService.js","cmps/GoogleMap.jsx","App.js","reportWebVitals.js","index.js"],"names":["ipService","getUserLocation","a","request","XMLHttpRequest","Promise","resolve","reject","open","setRequestHeader","onreadystatechange","this","readyState","res","JSON","parse","responseText","user","lat","latitude","lon","longitude","city","country","country_name","send","mapStyles","width","height","_GoogleMap","state","loc","console","log","setState","className","google","props","zoom","style","initialCenter","lng","center","position","name","visible","React","Component","GoogleMap","GoogleApiWrapper","apiKey","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAAaA,EAAY,CACvBC,gB,wFAGF,4BAAAC,EAAA,6DACMC,EAAU,IAAIC,eADpB,kBAES,IAAIC,SAAQ,SAAUC,EAASC,GACpCJ,EAAQK,KACN,MACA,2FACA,GAGFL,EAAQM,iBAAiB,SAAU,oBACnCN,EAAQO,mBAAqB,WAC3B,GAAwB,IAApBC,KAAKC,WAAkB,CACzB,IAAMC,EAAMC,KAAKC,MAAMJ,KAAKK,cACtBC,EAAO,CACXC,IAAKL,EAAIM,SACTC,IAAKP,EAAIQ,UACTC,KAAMT,EAAIS,KACVC,QAASV,EAAIW,cAEflB,EAAQW,KAIZd,EAAQsB,WAvBZ,4C,iCCAMC,EAAY,CAChBC,MAAO,OACPC,OAAQ,OAGJC,E,4MACJC,MAAQ,CACNZ,IAAK,kBACLE,IAAK,oB,8FAEP,4BAAAlB,EAAA,sEACoBF,EAAUC,kBAD9B,OACQ8B,EADR,OAEEC,QAAQC,IAAIF,GACZpB,KAAKuB,SAAL,eAAmBH,IAHrB,gD,0EAKA,WACE,OACE,sBAAKI,UAAU,gBAAf,UACE,eAAC,MAAD,CACEA,UAAU,MACVC,OAAQzB,KAAK0B,MAAMD,OACnBE,KAAM,GACNC,MAAOb,EACPc,cAAe,CACbtB,IAAKP,KAAKmB,MAAMZ,IAChBuB,IAAK9B,KAAKmB,MAAMV,KAElBsB,OAAQ,CACNxB,IAAKP,KAAKmB,MAAMZ,IAChBuB,IAAK9B,KAAKmB,MAAMV,KAXpB,UAcE,cAAC,SAAD,CAAQuB,SAAUhC,KAAKmB,MAAOc,KAAM,mBAEpC,cAAC,aAAD,CAAYD,SAAUhC,KAAKmB,MAAOe,SAAS,EAA3C,SACE,gCACE,6BAAKlC,KAAKmB,MAAMP,UAChB,6BAAKZ,KAAKmB,MAAMR,eAKrBX,KAAKmB,MAAMP,SAAWZ,KAAKmB,MAAMR,MAChC,sBAAKa,UAAU,aAAf,UACE,gDAAmBxB,KAAKmB,MAAMP,WAC9B,6CAAgBZ,KAAKmB,MAAMR,kB,GAxCdwB,IAAMC,WAgDlBC,EAAYC,2BAAiB,CACxCC,OAAQ,2CADeD,CAEtBpB,GC1CYsB,MAdf,WACE,OACE,sBAAKhB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qDAEF,+BACE,cAACa,EAAD,MAEF,uDCASI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cf12538b.chunk.js","sourcesContent":["export const ipService = {\n  getUserLocation,\n};\n\nasync function getUserLocation() {\n  var request = new XMLHttpRequest();\n  return new Promise(function (resolve, reject) {\n    request.open(\n      \"GET\",\n      \"https://api.ipdata.co/?api-key=dcb19aafdd3accd0ca61b014f91a6cc5888d57f4f703a9758da3751e\",\n      true\n    );\n\n    request.setRequestHeader(\"Accept\", \"application/json\");\n    request.onreadystatechange = function () {\n      if (this.readyState === 4) {\n        const res = JSON.parse(this.responseText);\n        const user = {\n          lat: res.latitude,\n          lon: res.longitude,\n          city: res.city,\n          country: res.country_name,\n        };\n        resolve(user);\n      }\n    };\n\n    request.send();\n  });\n}\n","import React from \"react\";\nimport { GoogleApiWrapper, Map, Marker, InfoWindow } from \"google-maps-react\";\nimport { ipService } from \"../services/ipService\";\n\nconst mapStyles = {\n  width: \"100%\",\n  height: \"80%\",\n};\n\nclass _GoogleMap extends React.Component {\n  state = {\n    lat: 32.11120415461782,\n    lon: 34.841250446024176,\n  };\n  async componentDidMount() {\n    const loc = await ipService.getUserLocation();\n    console.log(loc);\n    this.setState({ ...loc });\n  }\n  render() {\n    return (\n      <div className=\"map-container\">\n        <Map\n          className=\"map\"\n          google={this.props.google}\n          zoom={14}\n          style={mapStyles}\n          initialCenter={{\n            lat: this.state.lat,\n            lng: this.state.lon,\n          }}\n          center={{\n            lat: this.state.lat,\n            lng: this.state.lon,\n          }}\n        >\n          <Marker position={this.state} name={\"Users location\"} />\n\n          <InfoWindow position={this.state} visible={true}>\n            <div>\n              <h3>{this.state.country}</h3>\n              <h4>{this.state.city}</h4>\n            </div>\n          </InfoWindow>\n        </Map>\n\n        {this.state.country && this.state.city && (\n          <div className=\"users-data\">\n            <h3>Your country: {this.state.country}</h3>\n            <h4>Your city: {this.state.city}</h4>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const GoogleMap = GoogleApiWrapper({\n  apiKey: \"AIzaSyAoa_fPXN4AWoy3vu8k-Vai4quO_ah8DLg\",\n})(_GoogleMap);\n","import \"./assets/css/main.css\";\nimport { GoogleMap } from \"./cmps/GoogleMap.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Google Maps</h1>\n      </header>\n      <main>\n        <GoogleMap />\n      </main>\n      <footer>Alex Guberman</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}